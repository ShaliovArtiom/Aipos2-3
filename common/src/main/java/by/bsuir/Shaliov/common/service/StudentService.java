/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package by.bsuir.Shaliov.common.service;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-03-16")
public class StudentService {

  public interface Iface {

    public void addBookTable(int id, java.lang.String bookName, java.lang.String authorName, int pageValue) throws org.apache.thrift.TException;

    public void renameBookTable(int id, java.lang.String bookName, java.lang.String authorName, int pageValue) throws org.apache.thrift.TException;

    public void deleteBookTable(int id, java.lang.String bookName, java.lang.String authorName, int pageValue) throws org.apache.thrift.TException;

    public java.util.List<by.bsuir.Shaliov.common.model.Book> getAllBook() throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void addBookTable(int id, java.lang.String bookName, java.lang.String authorName, int pageValue, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void renameBookTable(int id, java.lang.String bookName, java.lang.String authorName, int pageValue, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void deleteBookTable(int id, java.lang.String bookName, java.lang.String authorName, int pageValue, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void getAllBook(org.apache.thrift.async.AsyncMethodCallback<java.util.List<by.bsuir.Shaliov.common.model.Book>> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void addBookTable(int id, java.lang.String bookName, java.lang.String authorName, int pageValue) throws org.apache.thrift.TException
    {
      send_addBookTable(id, bookName, authorName, pageValue);
      recv_addBookTable();
    }

    public void send_addBookTable(int id, java.lang.String bookName, java.lang.String authorName, int pageValue) throws org.apache.thrift.TException
    {
      addBookTable_args args = new addBookTable_args();
      args.setId(id);
      args.setBookName(bookName);
      args.setAuthorName(authorName);
      args.setPageValue(pageValue);
      sendBase("addBookTable", args);
    }

    public void recv_addBookTable() throws org.apache.thrift.TException
    {
      addBookTable_result result = new addBookTable_result();
      receiveBase(result, "addBookTable");
      return;
    }

    public void renameBookTable(int id, java.lang.String bookName, java.lang.String authorName, int pageValue) throws org.apache.thrift.TException
    {
      send_renameBookTable(id, bookName, authorName, pageValue);
      recv_renameBookTable();
    }

    public void send_renameBookTable(int id, java.lang.String bookName, java.lang.String authorName, int pageValue) throws org.apache.thrift.TException
    {
      renameBookTable_args args = new renameBookTable_args();
      args.setId(id);
      args.setBookName(bookName);
      args.setAuthorName(authorName);
      args.setPageValue(pageValue);
      sendBase("renameBookTable", args);
    }

    public void recv_renameBookTable() throws org.apache.thrift.TException
    {
      renameBookTable_result result = new renameBookTable_result();
      receiveBase(result, "renameBookTable");
      return;
    }

    public void deleteBookTable(int id, java.lang.String bookName, java.lang.String authorName, int pageValue) throws org.apache.thrift.TException
    {
      send_deleteBookTable(id, bookName, authorName, pageValue);
      recv_deleteBookTable();
    }

    public void send_deleteBookTable(int id, java.lang.String bookName, java.lang.String authorName, int pageValue) throws org.apache.thrift.TException
    {
      deleteBookTable_args args = new deleteBookTable_args();
      args.setId(id);
      args.setBookName(bookName);
      args.setAuthorName(authorName);
      args.setPageValue(pageValue);
      sendBase("deleteBookTable", args);
    }

    public void recv_deleteBookTable() throws org.apache.thrift.TException
    {
      deleteBookTable_result result = new deleteBookTable_result();
      receiveBase(result, "deleteBookTable");
      return;
    }

    public java.util.List<by.bsuir.Shaliov.common.model.Book> getAllBook() throws org.apache.thrift.TException
    {
      send_getAllBook();
      return recv_getAllBook();
    }

    public void send_getAllBook() throws org.apache.thrift.TException
    {
      getAllBook_args args = new getAllBook_args();
      sendBase("getAllBook", args);
    }

    public java.util.List<by.bsuir.Shaliov.common.model.Book> recv_getAllBook() throws org.apache.thrift.TException
    {
      getAllBook_result result = new getAllBook_result();
      receiveBase(result, "getAllBook");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllBook failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addBookTable(int id, java.lang.String bookName, java.lang.String authorName, int pageValue, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addBookTable_call method_call = new addBookTable_call(id, bookName, authorName, pageValue, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addBookTable_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int id;
      private java.lang.String bookName;
      private java.lang.String authorName;
      private int pageValue;
      public addBookTable_call(int id, java.lang.String bookName, java.lang.String authorName, int pageValue, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.bookName = bookName;
        this.authorName = authorName;
        this.pageValue = pageValue;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addBookTable", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addBookTable_args args = new addBookTable_args();
        args.setId(id);
        args.setBookName(bookName);
        args.setAuthorName(authorName);
        args.setPageValue(pageValue);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void renameBookTable(int id, java.lang.String bookName, java.lang.String authorName, int pageValue, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      renameBookTable_call method_call = new renameBookTable_call(id, bookName, authorName, pageValue, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class renameBookTable_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int id;
      private java.lang.String bookName;
      private java.lang.String authorName;
      private int pageValue;
      public renameBookTable_call(int id, java.lang.String bookName, java.lang.String authorName, int pageValue, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.bookName = bookName;
        this.authorName = authorName;
        this.pageValue = pageValue;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("renameBookTable", org.apache.thrift.protocol.TMessageType.CALL, 0));
        renameBookTable_args args = new renameBookTable_args();
        args.setId(id);
        args.setBookName(bookName);
        args.setAuthorName(authorName);
        args.setPageValue(pageValue);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void deleteBookTable(int id, java.lang.String bookName, java.lang.String authorName, int pageValue, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteBookTable_call method_call = new deleteBookTable_call(id, bookName, authorName, pageValue, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteBookTable_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int id;
      private java.lang.String bookName;
      private java.lang.String authorName;
      private int pageValue;
      public deleteBookTable_call(int id, java.lang.String bookName, java.lang.String authorName, int pageValue, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.bookName = bookName;
        this.authorName = authorName;
        this.pageValue = pageValue;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteBookTable", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteBookTable_args args = new deleteBookTable_args();
        args.setId(id);
        args.setBookName(bookName);
        args.setAuthorName(authorName);
        args.setPageValue(pageValue);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void getAllBook(org.apache.thrift.async.AsyncMethodCallback<java.util.List<by.bsuir.Shaliov.common.model.Book>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAllBook_call method_call = new getAllBook_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllBook_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<by.bsuir.Shaliov.common.model.Book>> {
      public getAllBook_call(org.apache.thrift.async.AsyncMethodCallback<java.util.List<by.bsuir.Shaliov.common.model.Book>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllBook", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllBook_args args = new getAllBook_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<by.bsuir.Shaliov.common.model.Book> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllBook();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addBookTable", new addBookTable());
      processMap.put("renameBookTable", new renameBookTable());
      processMap.put("deleteBookTable", new deleteBookTable());
      processMap.put("getAllBook", new getAllBook());
      return processMap;
    }

    public static class addBookTable<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addBookTable_args> {
      public addBookTable() {
        super("addBookTable");
      }

      public addBookTable_args getEmptyArgsInstance() {
        return new addBookTable_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addBookTable_result getResult(I iface, addBookTable_args args) throws org.apache.thrift.TException {
        addBookTable_result result = new addBookTable_result();
        iface.addBookTable(args.id, args.bookName, args.authorName, args.pageValue);
        return result;
      }
    }

    public static class renameBookTable<I extends Iface> extends org.apache.thrift.ProcessFunction<I, renameBookTable_args> {
      public renameBookTable() {
        super("renameBookTable");
      }

      public renameBookTable_args getEmptyArgsInstance() {
        return new renameBookTable_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public renameBookTable_result getResult(I iface, renameBookTable_args args) throws org.apache.thrift.TException {
        renameBookTable_result result = new renameBookTable_result();
        iface.renameBookTable(args.id, args.bookName, args.authorName, args.pageValue);
        return result;
      }
    }

    public static class deleteBookTable<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteBookTable_args> {
      public deleteBookTable() {
        super("deleteBookTable");
      }

      public deleteBookTable_args getEmptyArgsInstance() {
        return new deleteBookTable_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteBookTable_result getResult(I iface, deleteBookTable_args args) throws org.apache.thrift.TException {
        deleteBookTable_result result = new deleteBookTable_result();
        iface.deleteBookTable(args.id, args.bookName, args.authorName, args.pageValue);
        return result;
      }
    }

    public static class getAllBook<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllBook_args> {
      public getAllBook() {
        super("getAllBook");
      }

      public getAllBook_args getEmptyArgsInstance() {
        return new getAllBook_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAllBook_result getResult(I iface, getAllBook_args args) throws org.apache.thrift.TException {
        getAllBook_result result = new getAllBook_result();
        result.success = iface.getAllBook();
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("addBookTable", new addBookTable());
      processMap.put("renameBookTable", new renameBookTable());
      processMap.put("deleteBookTable", new deleteBookTable());
      processMap.put("getAllBook", new getAllBook());
      return processMap;
    }

    public static class addBookTable<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addBookTable_args, Void> {
      public addBookTable() {
        super("addBookTable");
      }

      public addBookTable_args getEmptyArgsInstance() {
        return new addBookTable_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            addBookTable_result result = new addBookTable_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            addBookTable_result result = new addBookTable_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addBookTable_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.addBookTable(args.id, args.bookName, args.authorName, args.pageValue,resultHandler);
      }
    }

    public static class renameBookTable<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, renameBookTable_args, Void> {
      public renameBookTable() {
        super("renameBookTable");
      }

      public renameBookTable_args getEmptyArgsInstance() {
        return new renameBookTable_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            renameBookTable_result result = new renameBookTable_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            renameBookTable_result result = new renameBookTable_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, renameBookTable_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.renameBookTable(args.id, args.bookName, args.authorName, args.pageValue,resultHandler);
      }
    }

    public static class deleteBookTable<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteBookTable_args, Void> {
      public deleteBookTable() {
        super("deleteBookTable");
      }

      public deleteBookTable_args getEmptyArgsInstance() {
        return new deleteBookTable_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            deleteBookTable_result result = new deleteBookTable_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            deleteBookTable_result result = new deleteBookTable_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteBookTable_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.deleteBookTable(args.id, args.bookName, args.authorName, args.pageValue,resultHandler);
      }
    }

    public static class getAllBook<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllBook_args, java.util.List<by.bsuir.Shaliov.common.model.Book>> {
      public getAllBook() {
        super("getAllBook");
      }

      public getAllBook_args getEmptyArgsInstance() {
        return new getAllBook_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<by.bsuir.Shaliov.common.model.Book>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<by.bsuir.Shaliov.common.model.Book>>() { 
          public void onComplete(java.util.List<by.bsuir.Shaliov.common.model.Book> o) {
            getAllBook_result result = new getAllBook_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getAllBook_result result = new getAllBook_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAllBook_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<by.bsuir.Shaliov.common.model.Book>> resultHandler) throws org.apache.thrift.TException {
        iface.getAllBook(resultHandler);
      }
    }

  }

  public static class addBookTable_args implements org.apache.thrift.TBase<addBookTable_args, addBookTable_args._Fields>, java.io.Serializable, Cloneable, Comparable<addBookTable_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addBookTable_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField BOOK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bookName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField AUTHOR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("authorName", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField PAGE_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageValue", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addBookTable_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addBookTable_argsTupleSchemeFactory();

    public int id; // required
    public java.lang.String bookName; // required
    public java.lang.String authorName; // required
    public int pageValue; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      BOOK_NAME((short)2, "bookName"),
      AUTHOR_NAME((short)3, "authorName"),
      PAGE_VALUE((short)4, "pageValue");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // BOOK_NAME
            return BOOK_NAME;
          case 3: // AUTHOR_NAME
            return AUTHOR_NAME;
          case 4: // PAGE_VALUE
            return PAGE_VALUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private static final int __PAGEVALUE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.BOOK_NAME, new org.apache.thrift.meta_data.FieldMetaData("bookName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AUTHOR_NAME, new org.apache.thrift.meta_data.FieldMetaData("authorName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAGE_VALUE, new org.apache.thrift.meta_data.FieldMetaData("pageValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addBookTable_args.class, metaDataMap);
    }

    public addBookTable_args() {
    }

    public addBookTable_args(
      int id,
      java.lang.String bookName,
      java.lang.String authorName,
      int pageValue)
    {
      this();
      this.id = id;
      setIdIsSet(true);
      this.bookName = bookName;
      this.authorName = authorName;
      this.pageValue = pageValue;
      setPageValueIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addBookTable_args(addBookTable_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
      if (other.isSetBookName()) {
        this.bookName = other.bookName;
      }
      if (other.isSetAuthorName()) {
        this.authorName = other.authorName;
      }
      this.pageValue = other.pageValue;
    }

    public addBookTable_args deepCopy() {
      return new addBookTable_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
      this.bookName = null;
      this.authorName = null;
      setPageValueIsSet(false);
      this.pageValue = 0;
    }

    public int getId() {
      return this.id;
    }

    public addBookTable_args setId(int id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public java.lang.String getBookName() {
      return this.bookName;
    }

    public addBookTable_args setBookName(java.lang.String bookName) {
      this.bookName = bookName;
      return this;
    }

    public void unsetBookName() {
      this.bookName = null;
    }

    /** Returns true if field bookName is set (has been assigned a value) and false otherwise */
    public boolean isSetBookName() {
      return this.bookName != null;
    }

    public void setBookNameIsSet(boolean value) {
      if (!value) {
        this.bookName = null;
      }
    }

    public java.lang.String getAuthorName() {
      return this.authorName;
    }

    public addBookTable_args setAuthorName(java.lang.String authorName) {
      this.authorName = authorName;
      return this;
    }

    public void unsetAuthorName() {
      this.authorName = null;
    }

    /** Returns true if field authorName is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthorName() {
      return this.authorName != null;
    }

    public void setAuthorNameIsSet(boolean value) {
      if (!value) {
        this.authorName = null;
      }
    }

    public int getPageValue() {
      return this.pageValue;
    }

    public addBookTable_args setPageValue(int pageValue) {
      this.pageValue = pageValue;
      setPageValueIsSet(true);
      return this;
    }

    public void unsetPageValue() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGEVALUE_ISSET_ID);
    }

    /** Returns true if field pageValue is set (has been assigned a value) and false otherwise */
    public boolean isSetPageValue() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGEVALUE_ISSET_ID);
    }

    public void setPageValueIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGEVALUE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((java.lang.Integer)value);
        }
        break;

      case BOOK_NAME:
        if (value == null) {
          unsetBookName();
        } else {
          setBookName((java.lang.String)value);
        }
        break;

      case AUTHOR_NAME:
        if (value == null) {
          unsetAuthorName();
        } else {
          setAuthorName((java.lang.String)value);
        }
        break;

      case PAGE_VALUE:
        if (value == null) {
          unsetPageValue();
        } else {
          setPageValue((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      case BOOK_NAME:
        return getBookName();

      case AUTHOR_NAME:
        return getAuthorName();

      case PAGE_VALUE:
        return getPageValue();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case BOOK_NAME:
        return isSetBookName();
      case AUTHOR_NAME:
        return isSetAuthorName();
      case PAGE_VALUE:
        return isSetPageValue();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof addBookTable_args)
        return this.equals((addBookTable_args)that);
      return false;
    }

    public boolean equals(addBookTable_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      boolean this_present_bookName = true && this.isSetBookName();
      boolean that_present_bookName = true && that.isSetBookName();
      if (this_present_bookName || that_present_bookName) {
        if (!(this_present_bookName && that_present_bookName))
          return false;
        if (!this.bookName.equals(that.bookName))
          return false;
      }

      boolean this_present_authorName = true && this.isSetAuthorName();
      boolean that_present_authorName = true && that.isSetAuthorName();
      if (this_present_authorName || that_present_authorName) {
        if (!(this_present_authorName && that_present_authorName))
          return false;
        if (!this.authorName.equals(that.authorName))
          return false;
      }

      boolean this_present_pageValue = true;
      boolean that_present_pageValue = true;
      if (this_present_pageValue || that_present_pageValue) {
        if (!(this_present_pageValue && that_present_pageValue))
          return false;
        if (this.pageValue != that.pageValue)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + id;

      hashCode = hashCode * 8191 + ((isSetBookName()) ? 131071 : 524287);
      if (isSetBookName())
        hashCode = hashCode * 8191 + bookName.hashCode();

      hashCode = hashCode * 8191 + ((isSetAuthorName()) ? 131071 : 524287);
      if (isSetAuthorName())
        hashCode = hashCode * 8191 + authorName.hashCode();

      hashCode = hashCode * 8191 + pageValue;

      return hashCode;
    }

    @Override
    public int compareTo(addBookTable_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetBookName()).compareTo(other.isSetBookName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBookName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bookName, other.bookName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAuthorName()).compareTo(other.isSetAuthorName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthorName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorName, other.authorName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPageValue()).compareTo(other.isSetPageValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageValue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageValue, other.pageValue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("addBookTable_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("bookName:");
      if (this.bookName == null) {
        sb.append("null");
      } else {
        sb.append(this.bookName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authorName:");
      if (this.authorName == null) {
        sb.append("null");
      } else {
        sb.append(this.authorName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageValue:");
      sb.append(this.pageValue);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addBookTable_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addBookTable_argsStandardScheme getScheme() {
        return new addBookTable_argsStandardScheme();
      }
    }

    private static class addBookTable_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<addBookTable_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addBookTable_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.id = iprot.readI32();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BOOK_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bookName = iprot.readString();
                struct.setBookNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AUTHOR_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authorName = iprot.readString();
                struct.setAuthorNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PAGE_VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageValue = iprot.readI32();
                struct.setPageValueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addBookTable_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
        if (struct.bookName != null) {
          oprot.writeFieldBegin(BOOK_NAME_FIELD_DESC);
          oprot.writeString(struct.bookName);
          oprot.writeFieldEnd();
        }
        if (struct.authorName != null) {
          oprot.writeFieldBegin(AUTHOR_NAME_FIELD_DESC);
          oprot.writeString(struct.authorName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PAGE_VALUE_FIELD_DESC);
        oprot.writeI32(struct.pageValue);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addBookTable_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addBookTable_argsTupleScheme getScheme() {
        return new addBookTable_argsTupleScheme();
      }
    }

    private static class addBookTable_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<addBookTable_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addBookTable_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetBookName()) {
          optionals.set(1);
        }
        if (struct.isSetAuthorName()) {
          optionals.set(2);
        }
        if (struct.isSetPageValue()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetId()) {
          oprot.writeI32(struct.id);
        }
        if (struct.isSetBookName()) {
          oprot.writeString(struct.bookName);
        }
        if (struct.isSetAuthorName()) {
          oprot.writeString(struct.authorName);
        }
        if (struct.isSetPageValue()) {
          oprot.writeI32(struct.pageValue);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addBookTable_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.id = iprot.readI32();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bookName = iprot.readString();
          struct.setBookNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.authorName = iprot.readString();
          struct.setAuthorNameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.pageValue = iprot.readI32();
          struct.setPageValueIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addBookTable_result implements org.apache.thrift.TBase<addBookTable_result, addBookTable_result._Fields>, java.io.Serializable, Cloneable, Comparable<addBookTable_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addBookTable_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addBookTable_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addBookTable_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addBookTable_result.class, metaDataMap);
    }

    public addBookTable_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addBookTable_result(addBookTable_result other) {
    }

    public addBookTable_result deepCopy() {
      return new addBookTable_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof addBookTable_result)
        return this.equals((addBookTable_result)that);
      return false;
    }

    public boolean equals(addBookTable_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(addBookTable_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("addBookTable_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addBookTable_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addBookTable_resultStandardScheme getScheme() {
        return new addBookTable_resultStandardScheme();
      }
    }

    private static class addBookTable_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<addBookTable_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addBookTable_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addBookTable_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addBookTable_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addBookTable_resultTupleScheme getScheme() {
        return new addBookTable_resultTupleScheme();
      }
    }

    private static class addBookTable_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<addBookTable_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addBookTable_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addBookTable_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class renameBookTable_args implements org.apache.thrift.TBase<renameBookTable_args, renameBookTable_args._Fields>, java.io.Serializable, Cloneable, Comparable<renameBookTable_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("renameBookTable_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField BOOK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bookName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField AUTHOR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("authorName", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField PAGE_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageValue", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new renameBookTable_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new renameBookTable_argsTupleSchemeFactory();

    public int id; // required
    public java.lang.String bookName; // required
    public java.lang.String authorName; // required
    public int pageValue; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      BOOK_NAME((short)2, "bookName"),
      AUTHOR_NAME((short)3, "authorName"),
      PAGE_VALUE((short)4, "pageValue");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // BOOK_NAME
            return BOOK_NAME;
          case 3: // AUTHOR_NAME
            return AUTHOR_NAME;
          case 4: // PAGE_VALUE
            return PAGE_VALUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private static final int __PAGEVALUE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.BOOK_NAME, new org.apache.thrift.meta_data.FieldMetaData("bookName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AUTHOR_NAME, new org.apache.thrift.meta_data.FieldMetaData("authorName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAGE_VALUE, new org.apache.thrift.meta_data.FieldMetaData("pageValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(renameBookTable_args.class, metaDataMap);
    }

    public renameBookTable_args() {
    }

    public renameBookTable_args(
      int id,
      java.lang.String bookName,
      java.lang.String authorName,
      int pageValue)
    {
      this();
      this.id = id;
      setIdIsSet(true);
      this.bookName = bookName;
      this.authorName = authorName;
      this.pageValue = pageValue;
      setPageValueIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public renameBookTable_args(renameBookTable_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
      if (other.isSetBookName()) {
        this.bookName = other.bookName;
      }
      if (other.isSetAuthorName()) {
        this.authorName = other.authorName;
      }
      this.pageValue = other.pageValue;
    }

    public renameBookTable_args deepCopy() {
      return new renameBookTable_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
      this.bookName = null;
      this.authorName = null;
      setPageValueIsSet(false);
      this.pageValue = 0;
    }

    public int getId() {
      return this.id;
    }

    public renameBookTable_args setId(int id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public java.lang.String getBookName() {
      return this.bookName;
    }

    public renameBookTable_args setBookName(java.lang.String bookName) {
      this.bookName = bookName;
      return this;
    }

    public void unsetBookName() {
      this.bookName = null;
    }

    /** Returns true if field bookName is set (has been assigned a value) and false otherwise */
    public boolean isSetBookName() {
      return this.bookName != null;
    }

    public void setBookNameIsSet(boolean value) {
      if (!value) {
        this.bookName = null;
      }
    }

    public java.lang.String getAuthorName() {
      return this.authorName;
    }

    public renameBookTable_args setAuthorName(java.lang.String authorName) {
      this.authorName = authorName;
      return this;
    }

    public void unsetAuthorName() {
      this.authorName = null;
    }

    /** Returns true if field authorName is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthorName() {
      return this.authorName != null;
    }

    public void setAuthorNameIsSet(boolean value) {
      if (!value) {
        this.authorName = null;
      }
    }

    public int getPageValue() {
      return this.pageValue;
    }

    public renameBookTable_args setPageValue(int pageValue) {
      this.pageValue = pageValue;
      setPageValueIsSet(true);
      return this;
    }

    public void unsetPageValue() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGEVALUE_ISSET_ID);
    }

    /** Returns true if field pageValue is set (has been assigned a value) and false otherwise */
    public boolean isSetPageValue() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGEVALUE_ISSET_ID);
    }

    public void setPageValueIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGEVALUE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((java.lang.Integer)value);
        }
        break;

      case BOOK_NAME:
        if (value == null) {
          unsetBookName();
        } else {
          setBookName((java.lang.String)value);
        }
        break;

      case AUTHOR_NAME:
        if (value == null) {
          unsetAuthorName();
        } else {
          setAuthorName((java.lang.String)value);
        }
        break;

      case PAGE_VALUE:
        if (value == null) {
          unsetPageValue();
        } else {
          setPageValue((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      case BOOK_NAME:
        return getBookName();

      case AUTHOR_NAME:
        return getAuthorName();

      case PAGE_VALUE:
        return getPageValue();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case BOOK_NAME:
        return isSetBookName();
      case AUTHOR_NAME:
        return isSetAuthorName();
      case PAGE_VALUE:
        return isSetPageValue();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof renameBookTable_args)
        return this.equals((renameBookTable_args)that);
      return false;
    }

    public boolean equals(renameBookTable_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      boolean this_present_bookName = true && this.isSetBookName();
      boolean that_present_bookName = true && that.isSetBookName();
      if (this_present_bookName || that_present_bookName) {
        if (!(this_present_bookName && that_present_bookName))
          return false;
        if (!this.bookName.equals(that.bookName))
          return false;
      }

      boolean this_present_authorName = true && this.isSetAuthorName();
      boolean that_present_authorName = true && that.isSetAuthorName();
      if (this_present_authorName || that_present_authorName) {
        if (!(this_present_authorName && that_present_authorName))
          return false;
        if (!this.authorName.equals(that.authorName))
          return false;
      }

      boolean this_present_pageValue = true;
      boolean that_present_pageValue = true;
      if (this_present_pageValue || that_present_pageValue) {
        if (!(this_present_pageValue && that_present_pageValue))
          return false;
        if (this.pageValue != that.pageValue)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + id;

      hashCode = hashCode * 8191 + ((isSetBookName()) ? 131071 : 524287);
      if (isSetBookName())
        hashCode = hashCode * 8191 + bookName.hashCode();

      hashCode = hashCode * 8191 + ((isSetAuthorName()) ? 131071 : 524287);
      if (isSetAuthorName())
        hashCode = hashCode * 8191 + authorName.hashCode();

      hashCode = hashCode * 8191 + pageValue;

      return hashCode;
    }

    @Override
    public int compareTo(renameBookTable_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetBookName()).compareTo(other.isSetBookName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBookName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bookName, other.bookName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAuthorName()).compareTo(other.isSetAuthorName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthorName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorName, other.authorName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPageValue()).compareTo(other.isSetPageValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageValue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageValue, other.pageValue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("renameBookTable_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("bookName:");
      if (this.bookName == null) {
        sb.append("null");
      } else {
        sb.append(this.bookName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authorName:");
      if (this.authorName == null) {
        sb.append("null");
      } else {
        sb.append(this.authorName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageValue:");
      sb.append(this.pageValue);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class renameBookTable_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public renameBookTable_argsStandardScheme getScheme() {
        return new renameBookTable_argsStandardScheme();
      }
    }

    private static class renameBookTable_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<renameBookTable_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, renameBookTable_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.id = iprot.readI32();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BOOK_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bookName = iprot.readString();
                struct.setBookNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AUTHOR_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authorName = iprot.readString();
                struct.setAuthorNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PAGE_VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageValue = iprot.readI32();
                struct.setPageValueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, renameBookTable_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
        if (struct.bookName != null) {
          oprot.writeFieldBegin(BOOK_NAME_FIELD_DESC);
          oprot.writeString(struct.bookName);
          oprot.writeFieldEnd();
        }
        if (struct.authorName != null) {
          oprot.writeFieldBegin(AUTHOR_NAME_FIELD_DESC);
          oprot.writeString(struct.authorName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PAGE_VALUE_FIELD_DESC);
        oprot.writeI32(struct.pageValue);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class renameBookTable_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public renameBookTable_argsTupleScheme getScheme() {
        return new renameBookTable_argsTupleScheme();
      }
    }

    private static class renameBookTable_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<renameBookTable_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, renameBookTable_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetBookName()) {
          optionals.set(1);
        }
        if (struct.isSetAuthorName()) {
          optionals.set(2);
        }
        if (struct.isSetPageValue()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetId()) {
          oprot.writeI32(struct.id);
        }
        if (struct.isSetBookName()) {
          oprot.writeString(struct.bookName);
        }
        if (struct.isSetAuthorName()) {
          oprot.writeString(struct.authorName);
        }
        if (struct.isSetPageValue()) {
          oprot.writeI32(struct.pageValue);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, renameBookTable_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.id = iprot.readI32();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bookName = iprot.readString();
          struct.setBookNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.authorName = iprot.readString();
          struct.setAuthorNameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.pageValue = iprot.readI32();
          struct.setPageValueIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class renameBookTable_result implements org.apache.thrift.TBase<renameBookTable_result, renameBookTable_result._Fields>, java.io.Serializable, Cloneable, Comparable<renameBookTable_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("renameBookTable_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new renameBookTable_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new renameBookTable_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(renameBookTable_result.class, metaDataMap);
    }

    public renameBookTable_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public renameBookTable_result(renameBookTable_result other) {
    }

    public renameBookTable_result deepCopy() {
      return new renameBookTable_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof renameBookTable_result)
        return this.equals((renameBookTable_result)that);
      return false;
    }

    public boolean equals(renameBookTable_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(renameBookTable_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("renameBookTable_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class renameBookTable_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public renameBookTable_resultStandardScheme getScheme() {
        return new renameBookTable_resultStandardScheme();
      }
    }

    private static class renameBookTable_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<renameBookTable_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, renameBookTable_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, renameBookTable_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class renameBookTable_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public renameBookTable_resultTupleScheme getScheme() {
        return new renameBookTable_resultTupleScheme();
      }
    }

    private static class renameBookTable_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<renameBookTable_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, renameBookTable_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, renameBookTable_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deleteBookTable_args implements org.apache.thrift.TBase<deleteBookTable_args, deleteBookTable_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteBookTable_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteBookTable_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField BOOK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bookName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField AUTHOR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("authorName", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField PAGE_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageValue", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteBookTable_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteBookTable_argsTupleSchemeFactory();

    public int id; // required
    public java.lang.String bookName; // required
    public java.lang.String authorName; // required
    public int pageValue; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      BOOK_NAME((short)2, "bookName"),
      AUTHOR_NAME((short)3, "authorName"),
      PAGE_VALUE((short)4, "pageValue");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // BOOK_NAME
            return BOOK_NAME;
          case 3: // AUTHOR_NAME
            return AUTHOR_NAME;
          case 4: // PAGE_VALUE
            return PAGE_VALUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private static final int __PAGEVALUE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.BOOK_NAME, new org.apache.thrift.meta_data.FieldMetaData("bookName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AUTHOR_NAME, new org.apache.thrift.meta_data.FieldMetaData("authorName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAGE_VALUE, new org.apache.thrift.meta_data.FieldMetaData("pageValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteBookTable_args.class, metaDataMap);
    }

    public deleteBookTable_args() {
    }

    public deleteBookTable_args(
      int id,
      java.lang.String bookName,
      java.lang.String authorName,
      int pageValue)
    {
      this();
      this.id = id;
      setIdIsSet(true);
      this.bookName = bookName;
      this.authorName = authorName;
      this.pageValue = pageValue;
      setPageValueIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteBookTable_args(deleteBookTable_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
      if (other.isSetBookName()) {
        this.bookName = other.bookName;
      }
      if (other.isSetAuthorName()) {
        this.authorName = other.authorName;
      }
      this.pageValue = other.pageValue;
    }

    public deleteBookTable_args deepCopy() {
      return new deleteBookTable_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
      this.bookName = null;
      this.authorName = null;
      setPageValueIsSet(false);
      this.pageValue = 0;
    }

    public int getId() {
      return this.id;
    }

    public deleteBookTable_args setId(int id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public java.lang.String getBookName() {
      return this.bookName;
    }

    public deleteBookTable_args setBookName(java.lang.String bookName) {
      this.bookName = bookName;
      return this;
    }

    public void unsetBookName() {
      this.bookName = null;
    }

    /** Returns true if field bookName is set (has been assigned a value) and false otherwise */
    public boolean isSetBookName() {
      return this.bookName != null;
    }

    public void setBookNameIsSet(boolean value) {
      if (!value) {
        this.bookName = null;
      }
    }

    public java.lang.String getAuthorName() {
      return this.authorName;
    }

    public deleteBookTable_args setAuthorName(java.lang.String authorName) {
      this.authorName = authorName;
      return this;
    }

    public void unsetAuthorName() {
      this.authorName = null;
    }

    /** Returns true if field authorName is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthorName() {
      return this.authorName != null;
    }

    public void setAuthorNameIsSet(boolean value) {
      if (!value) {
        this.authorName = null;
      }
    }

    public int getPageValue() {
      return this.pageValue;
    }

    public deleteBookTable_args setPageValue(int pageValue) {
      this.pageValue = pageValue;
      setPageValueIsSet(true);
      return this;
    }

    public void unsetPageValue() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGEVALUE_ISSET_ID);
    }

    /** Returns true if field pageValue is set (has been assigned a value) and false otherwise */
    public boolean isSetPageValue() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGEVALUE_ISSET_ID);
    }

    public void setPageValueIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGEVALUE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((java.lang.Integer)value);
        }
        break;

      case BOOK_NAME:
        if (value == null) {
          unsetBookName();
        } else {
          setBookName((java.lang.String)value);
        }
        break;

      case AUTHOR_NAME:
        if (value == null) {
          unsetAuthorName();
        } else {
          setAuthorName((java.lang.String)value);
        }
        break;

      case PAGE_VALUE:
        if (value == null) {
          unsetPageValue();
        } else {
          setPageValue((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      case BOOK_NAME:
        return getBookName();

      case AUTHOR_NAME:
        return getAuthorName();

      case PAGE_VALUE:
        return getPageValue();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case BOOK_NAME:
        return isSetBookName();
      case AUTHOR_NAME:
        return isSetAuthorName();
      case PAGE_VALUE:
        return isSetPageValue();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteBookTable_args)
        return this.equals((deleteBookTable_args)that);
      return false;
    }

    public boolean equals(deleteBookTable_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      boolean this_present_bookName = true && this.isSetBookName();
      boolean that_present_bookName = true && that.isSetBookName();
      if (this_present_bookName || that_present_bookName) {
        if (!(this_present_bookName && that_present_bookName))
          return false;
        if (!this.bookName.equals(that.bookName))
          return false;
      }

      boolean this_present_authorName = true && this.isSetAuthorName();
      boolean that_present_authorName = true && that.isSetAuthorName();
      if (this_present_authorName || that_present_authorName) {
        if (!(this_present_authorName && that_present_authorName))
          return false;
        if (!this.authorName.equals(that.authorName))
          return false;
      }

      boolean this_present_pageValue = true;
      boolean that_present_pageValue = true;
      if (this_present_pageValue || that_present_pageValue) {
        if (!(this_present_pageValue && that_present_pageValue))
          return false;
        if (this.pageValue != that.pageValue)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + id;

      hashCode = hashCode * 8191 + ((isSetBookName()) ? 131071 : 524287);
      if (isSetBookName())
        hashCode = hashCode * 8191 + bookName.hashCode();

      hashCode = hashCode * 8191 + ((isSetAuthorName()) ? 131071 : 524287);
      if (isSetAuthorName())
        hashCode = hashCode * 8191 + authorName.hashCode();

      hashCode = hashCode * 8191 + pageValue;

      return hashCode;
    }

    @Override
    public int compareTo(deleteBookTable_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetBookName()).compareTo(other.isSetBookName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBookName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bookName, other.bookName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAuthorName()).compareTo(other.isSetAuthorName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthorName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorName, other.authorName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPageValue()).compareTo(other.isSetPageValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageValue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageValue, other.pageValue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteBookTable_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("bookName:");
      if (this.bookName == null) {
        sb.append("null");
      } else {
        sb.append(this.bookName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authorName:");
      if (this.authorName == null) {
        sb.append("null");
      } else {
        sb.append(this.authorName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageValue:");
      sb.append(this.pageValue);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteBookTable_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteBookTable_argsStandardScheme getScheme() {
        return new deleteBookTable_argsStandardScheme();
      }
    }

    private static class deleteBookTable_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteBookTable_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteBookTable_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.id = iprot.readI32();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BOOK_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bookName = iprot.readString();
                struct.setBookNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AUTHOR_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authorName = iprot.readString();
                struct.setAuthorNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PAGE_VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageValue = iprot.readI32();
                struct.setPageValueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteBookTable_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
        if (struct.bookName != null) {
          oprot.writeFieldBegin(BOOK_NAME_FIELD_DESC);
          oprot.writeString(struct.bookName);
          oprot.writeFieldEnd();
        }
        if (struct.authorName != null) {
          oprot.writeFieldBegin(AUTHOR_NAME_FIELD_DESC);
          oprot.writeString(struct.authorName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PAGE_VALUE_FIELD_DESC);
        oprot.writeI32(struct.pageValue);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteBookTable_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteBookTable_argsTupleScheme getScheme() {
        return new deleteBookTable_argsTupleScheme();
      }
    }

    private static class deleteBookTable_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteBookTable_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteBookTable_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetBookName()) {
          optionals.set(1);
        }
        if (struct.isSetAuthorName()) {
          optionals.set(2);
        }
        if (struct.isSetPageValue()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetId()) {
          oprot.writeI32(struct.id);
        }
        if (struct.isSetBookName()) {
          oprot.writeString(struct.bookName);
        }
        if (struct.isSetAuthorName()) {
          oprot.writeString(struct.authorName);
        }
        if (struct.isSetPageValue()) {
          oprot.writeI32(struct.pageValue);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteBookTable_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.id = iprot.readI32();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bookName = iprot.readString();
          struct.setBookNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.authorName = iprot.readString();
          struct.setAuthorNameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.pageValue = iprot.readI32();
          struct.setPageValueIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deleteBookTable_result implements org.apache.thrift.TBase<deleteBookTable_result, deleteBookTable_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteBookTable_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteBookTable_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteBookTable_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteBookTable_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteBookTable_result.class, metaDataMap);
    }

    public deleteBookTable_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteBookTable_result(deleteBookTable_result other) {
    }

    public deleteBookTable_result deepCopy() {
      return new deleteBookTable_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteBookTable_result)
        return this.equals((deleteBookTable_result)that);
      return false;
    }

    public boolean equals(deleteBookTable_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(deleteBookTable_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteBookTable_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteBookTable_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteBookTable_resultStandardScheme getScheme() {
        return new deleteBookTable_resultStandardScheme();
      }
    }

    private static class deleteBookTable_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteBookTable_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteBookTable_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteBookTable_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteBookTable_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteBookTable_resultTupleScheme getScheme() {
        return new deleteBookTable_resultTupleScheme();
      }
    }

    private static class deleteBookTable_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteBookTable_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteBookTable_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteBookTable_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getAllBook_args implements org.apache.thrift.TBase<getAllBook_args, getAllBook_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllBook_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllBook_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAllBook_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAllBook_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllBook_args.class, metaDataMap);
    }

    public getAllBook_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllBook_args(getAllBook_args other) {
    }

    public getAllBook_args deepCopy() {
      return new getAllBook_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllBook_args)
        return this.equals((getAllBook_args)that);
      return false;
    }

    public boolean equals(getAllBook_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(getAllBook_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAllBook_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllBook_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAllBook_argsStandardScheme getScheme() {
        return new getAllBook_argsStandardScheme();
      }
    }

    private static class getAllBook_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAllBook_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllBook_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllBook_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllBook_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAllBook_argsTupleScheme getScheme() {
        return new getAllBook_argsTupleScheme();
      }
    }

    private static class getAllBook_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAllBook_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllBook_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllBook_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getAllBook_result implements org.apache.thrift.TBase<getAllBook_result, getAllBook_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllBook_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllBook_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAllBook_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAllBook_resultTupleSchemeFactory();

    public java.util.List<by.bsuir.Shaliov.common.model.Book> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, by.bsuir.Shaliov.common.model.Book.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllBook_result.class, metaDataMap);
    }

    public getAllBook_result() {
    }

    public getAllBook_result(
      java.util.List<by.bsuir.Shaliov.common.model.Book> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllBook_result(getAllBook_result other) {
      if (other.isSetSuccess()) {
        java.util.List<by.bsuir.Shaliov.common.model.Book> __this__success = new java.util.ArrayList<by.bsuir.Shaliov.common.model.Book>(other.success.size());
        for (by.bsuir.Shaliov.common.model.Book other_element : other.success) {
          __this__success.add(new by.bsuir.Shaliov.common.model.Book(other_element));
        }
        this.success = __this__success;
      }
    }

    public getAllBook_result deepCopy() {
      return new getAllBook_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<by.bsuir.Shaliov.common.model.Book> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(by.bsuir.Shaliov.common.model.Book elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<by.bsuir.Shaliov.common.model.Book>();
      }
      this.success.add(elem);
    }

    public java.util.List<by.bsuir.Shaliov.common.model.Book> getSuccess() {
      return this.success;
    }

    public getAllBook_result setSuccess(java.util.List<by.bsuir.Shaliov.common.model.Book> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<by.bsuir.Shaliov.common.model.Book>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllBook_result)
        return this.equals((getAllBook_result)that);
      return false;
    }

    public boolean equals(getAllBook_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getAllBook_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAllBook_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllBook_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAllBook_resultStandardScheme getScheme() {
        return new getAllBook_resultStandardScheme();
      }
    }

    private static class getAllBook_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAllBook_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllBook_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<by.bsuir.Shaliov.common.model.Book>(_list0.size);
                  by.bsuir.Shaliov.common.model.Book _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new by.bsuir.Shaliov.common.model.Book();
                    _elem1.read(iprot);
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllBook_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (by.bsuir.Shaliov.common.model.Book _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllBook_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAllBook_resultTupleScheme getScheme() {
        return new getAllBook_resultTupleScheme();
      }
    }

    private static class getAllBook_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAllBook_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllBook_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (by.bsuir.Shaliov.common.model.Book _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllBook_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<by.bsuir.Shaliov.common.model.Book>(_list5.size);
            by.bsuir.Shaliov.common.model.Book _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new by.bsuir.Shaliov.common.model.Book();
              _elem6.read(iprot);
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
